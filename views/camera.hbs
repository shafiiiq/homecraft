<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Round" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <title>Document</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        * {
            padding: 0;
            margin: 0;
            outline: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
            border: 0;
            list-style-type: none;
            text-decoration: none;
            font-weight: 500;
        }

        body {
            background-color: rgb(24, 24, 24);
            width: 100vw;
            height: 100vh;
            overflow: hidden;
            background-image: url('/images/bg-cam.jpg');
            background-position: center;
            background-size: cover;
            position: relative;
        }

        .camera {
            display: flex;
            flex-direction: column;
            gap: 2rem;
            width: 100%;
            height: 100%;
            align-items: center;
            z-index: 1000;
            position: relative;
        }

        .camera-view {
            width: 90%;
            height: 100%;
            object-fit: cover;
            /* border-radius: 0 0 20px 20px; */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.7);
            border-bottom: 1px solid rgb(135, 135, 135);
            border-left: 1px solid rgb(135, 135, 135);
            border-right: 1px solid rgb(135, 135, 135);
        }

        .capture {
            height: 5rem;
            width: 5rem;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 3px solid white;
            background-color: transparent;
            position: absolute;
            bottom: 0.8rem;
            cursor: pointer;
        }

        .click {
            width: 85%;
            height: 85%;
            background-color: white;
            border-radius: 50%;
            cursor: pointer;
        }

        .absolute {
            position: absolute;
            bottom: 1.3rem;
            cursor: pointer;
        }

        .absolute span {
            font-size: 2.7rem;
            color: white;
        }

        .photo {
            left: 43.3%;
        }

        .photo span {
            font-size: 2.3rem;
        }

        .video {
            right: 43%;
        }

        .clicked {
            position: absolute;
            width: 4.5rem;
            height: 4.5rem;
            bottom: 1rem;
            left: 8rem;
            border-radius: 5px;
            object-fit: cover;
            z-index: 30000;
        }

        .abs {
            position: absolute;
            width: 5.2rem;
            display: flex;
            flex-direction: column;
            gap: 2rem;
            color: white;
            align-items: center;
            justify-content: center;
            height: 87%;
        }

        .abs span {
            font-size: 1.8rem;
            cursor: pointer;
            transition: all 0.3s ease;
            height: 2.9rem;
            width: 2.9rem;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: transparent;
        }

        .abs span:hover {
            background-color: rgb(52, 52, 52);
            border-radius: 50%;
            font-size: 1.4rem;
        }

        .left {
            left: 0;
        }

        .right {
            right: 0;
        }

        #close {
            position: absolute;
            top: 2rem;
        }

        .absol {
            position: absolute;
        }

        .upload {
            bottom: 1.6rem;
            right: 8rem;
            width: 7rem;
            height: 3rem;
            border-radius: 6px;
            background-color: rgb(57, 57, 57);
            font-size: 1.2rem;
            font-weight: 500;
            color: white;
            cursor: pointer;
        }


        .instruction {
            color: white;
            text-align: center;
            position: absolute;
            left: 50%;
            top: 40%;
            transform: translate(-50%, -50%);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .invoke {
            display: flex;
            justify-content: center;
            align-items: center;
            left: 50%;
            transform: translateX(-50%);
            bottom: 10rem;
            width: 5rem;
            height: 5rem;
            border-radius: 50%;
            color: white;
            background-color: rgb(47, 47, 47);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.7);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .invoke span {
            color: white;
            font-size: 2rem;
        }

        .invoke:hover {
            background-color: rgb(39, 39, 39);
            box-shadow: 0 0 10px rgba(0, 0, 0, 1);
        }

        .instruction p.warning {
            position: absolute;
            top: 28rem;
            left: 10%;
        }

        .logo {
            position: absolute;
            left: 50%;
            top: 3rem;
            transform: translateX(-50%);
            width: 20rem;
            object-fit: cover;
            height: 5rem;
        }

        .red {
            color: rgb(216, 41, 41);
            display: flex;
        }

        .rules {
            color: rgb(45, 201, 45);
        }

        .fullscreen {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            width: 210vh;
            height: 100vh;
            object-fit: contain;
            background-color: rgb(33, 37, 39);
            z-index: 9999;
            /* ensure the image is on top of other content */
            cursor: pointer;
            /* show pointer cursor when hovering over the image */
        }

        .finished-count {
            position: absolute;
            width: 100%;
            height: 100%;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 1.5rem;
            color: white;
            z-index: 1000000000000000;
        }

        .head {
            font-size: 46px;
        }

        .sub {
            font-size: 25px;
        }

        .back-to {
            cursor: pointer;
            color: white;
            font-size: 14px;
        }
    </style>
</head>

<body>
    <div class="finished-count" style="display: none;">
        <p class="head">Thank you for your time</p>
        <p class="sub">Today's updation is completed</p>
        <a href="/updates" class="back-to" onclick="closeCamera()">
            <p class="sub">Back to others</p>
        </a>
    </div>
    <img src="images/logo.white.png" alt="" class="logo">
    <div class="instruction">
        <h1>
            Weekly Building Project Update Guidelines
        </h1>
        <p>
            Welcome to our weekly update protocol! Here's what you need to know:
        </p>
        <p class="rules">
            . Capture 5 pictures. <br>
            . Record 1 video. <br>
            . Location details will be automatically included.
        </p>
        <p class="warning">
            <span class="red"> <span class="material-icons-round">
                    priority_high
                </span>We value honesty. Deception will face immediate consequences.</span> <br> Thank you for
            helping us keep everyone informed!
        </p>
    </div>
    <button onclick="openCamera()" class="absol invoke">
        <span class="material-icons-round">
            photo_camera
        </span>
    </button>

    <!-- This camera view  -->
    <div class="camera" style="display: none;">
        <div id="timer" class="timer" style="display: none;">00:00</div>
        <div class="left abs">
            <span class="material-icons-round">
                keyboard_arrow_up
            </span>
            <span class="material-icons-round" id="close" onclick="closeCamera()">
                close
            </span>
            <span class="material-icons-round">
                settings
            </span>
            <span class="material-icons-round">
                edit
            </span>
            <span class="material-icons-round">
                dns
            </span>
            <span class="material-icons-round">
                ads_click
            </span>
            <span class="material-icons-round">
                expand_more
            </span>
        </div>
        <div class="right abs">
            <span class="material-icons-round">
                keyboard_arrow_up
            </span>
            <span class="material-icons-round">
                sensors
            </span>
            <span class="material-icons-round">
                api
            </span>
            <span class="material-icons-round">
                auto_fix_high
            </span>
            <span class="material-icons-round">
                tungsten
            </span>
            <span class="material-icons-round">
                mic_none
            </span>
            <span class="material-icons-round">
                emoji_nature
            </span>
            <span class="material-icons-round">
                expand_more
            </span>
        </div>
        <canvas id="canvas" style="display:none;"></canvas>
        <video id="video" class="camera-view"></video>
        <button id="captureButton" class="capture" disabled onclick="stopRecording()">
            <div class="click"></div>
        </button>
        <div class="photo absolute">
            <span class="material-icons-round" id="photo-mode">
                photo_camera
            </span>
            <span class="material-icons-round" style="display: none;" id="pause">
                pause_circle
            </span>
        </div>
        <div class="video absolute">
            <span class="material-icons-round" id="video-mode" onclick="startRecording()">
                videocam
            </span>
            <span class="material-icons-round" style="display: none;" id="stop">
                stop_circle
            </span>
        </div>
        <img id="capturedImage" class="clicked" style="display:none;" onclick="expandImage(this)">
        <button id="uploadButton" class="absol upload" disabled>
            Upload
        </button>
    </div>

    <script>
        function openCamera() {
            var cameraDiv = document.querySelector('.camera');
            var cameraInvoke = document.querySelector('.invoke');
            var instruction = document.querySelector('.instruction');
            cameraDiv.style.display = 'flex';
            instruction.style.display = 'none';
            cameraInvoke.style.display = 'none';

            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                alert('Sorry, your browser does not support accessing the camera.');
                return;
            }

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(function (stream) {
                    var video = document.getElementById('video');
                    video.srcObject = stream;
                    video.play();

                    // Enable the "Take Picture" button
                    document.getElementById('captureButton').disabled = false;
                })
                .catch(function (error) {
                    console.error('Error accessing camera:', error);
                    alert('Unable to access the camera.');
                    closeCamera(); // Close camera on error
                });
        }

        function closeCamera() {
            var cameraDiv = document.querySelector('.camera');
            var cameraInvoke = document.querySelector('.invoke');
            var instruction = document.querySelector('.instruction');
            cameraDiv.style.display = 'none';
            instruction.style.display = 'block';
            cameraInvoke.style.display = 'flex';

            // Stop video stream
            var video = document.getElementById('video');
            var stream = video.srcObject;
            if (stream) {
                var tracks = stream.getTracks();
                tracks.forEach(function (track) {
                    track.stop();
                });
            }
        }

        document.getElementById('captureButton').addEventListener('click', function () {
            var video = document.getElementById('video');
            var canvas = document.getElementById('canvas');
            var capturedImage = document.getElementById('capturedImage');
            var uploadButton = document.getElementById('uploadButton');

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);

            // Convert the canvas content to a data URL representing a JPEG image
            var dataURL = canvas.toDataURL('image/jpeg');

            // Set the captured image source to the data URL
            capturedImage.src = dataURL;
            capturedImage.style.display = 'block';

            // Enable the upload button
            uploadButton.disabled = false;
        });

        document.getElementById('uploadButton').addEventListener('click', function () {

            takecount();

            var capturedImage = document.getElementById('capturedImage');
            var dataURL = capturedImage.src;

            fetch(dataURL)
                .then(response => response.blob())
                .then(blob => {
                    var formData = new FormData();
                    formData.append('image', blob, 'image.jpg');

                    return fetch('/upload', {
                        method: 'POST',
                        body: formData
                    });
                })
                .then(response => {
                    if (response.ok) {
                        return response.text();
                    }
                    throw new Error('Failed to upload image.');
                })
                .then(data => {
                    alert(data);
                })
                .catch(error => {
                    console.error('Error uploading image:', error);
                    alert('An error occurred while uploading the image.');
                });
        });

        function expandImage(element) {
            element.classList.toggle('fullscreen');
        }

        let timerInterval; // Global variable to store the timer interval


        var count = 0;

        // Function to increment count and log
        function takecount() {
            count++;
            console.log('Count:', count);
            if (count === 5) {
                console.log('Finished');
                document.querySelector('.finished-count').style.display = 'flex'
            }
        }


    </script>
</body>

</html>